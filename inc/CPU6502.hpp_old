#ifndef CPU_hpp
#define CPU_hpp
#include <cstdint>
#include <vector>
#include <string>
#include <MainBus.hpp>

const auto NMIVector{ 0xfffa };
const auto ResetVector{ 0xfffc };
const auto IRQVector{ 0xfffe };

class CPU6502
{
public:
	CPU6502();

	typedef struct Statusregister
	{
		uint8_t		c : 1; //carry
		uint8_t		z : 1; //zero
		uint8_t		i : 1; //interrupt disable
		uint8_t		d : 1; //decimal mode
		uint8_t		b : 1; //software interrupt
		uint8_t		pad : 1;
		uint8_t		v : 1; //overflow
		uint8_t		s : 1; //sign
	} Statusregister;

	/* The 6502's 13 addressing modes */
	//enum class addressing_mode_e { 
	//  IMMED = 0, /* Immediate */
	//  ABSOL,     /* Absolute */
	//  ZEROP,     /* Zero Page */
	//  IMPLI,     /* Implied */
	//  INDIA,     /* Indirect Absolute */
	//  ABSIX,     /* Absolute indexed with X */
	//  ABSIY,     /* Absolute indexed with Y */
	//  ZEPIX,     /* Zero page indexed with X */
	//  ZEPIY,     /* Zero page indexed with Y */
	//  INDIN,     /* Indexed indirect (with X) */
	//  ININD,     /* Indirect indexed (with Y) */
	//  RELAT,     /* Relative */
	//  ACCUM      /* Accumulator */
	//};


	//class Opcode
	//{
	//public:
	//  Opcode(const uint8_t opcode, const std::string& mnemonic, const addressing_mode_e am, unsigned int cycles)
	//   : number(opcode), mnemonic(mnemonic), addressing_mode(am), cycles(cycles)
	//  {}

	//  uint8_t number;
	//  std::string mnemonic;
	//  addressing_mode_e addressing_mode;
	//  unsigned int cycles;
	//};

	// Adressing Modes
	uint8_t IMP();	uint8_t IMM();
	uint8_t ZP0();	uint8_t ZPX();
	uint8_t ZPY();	uint8_t REL();
	uint8_t ABS();	uint8_t ABX();
	uint8_t ABY();	uint8_t IND();
	uint8_t IZX();	uint8_t IZY();

	// Instructions
	uint8_t ADC();	uint8_t AND();	uint8_t ASL();	uint8_t BCC();
	uint8_t BCS();	uint8_t BEQ();	uint8_t BIT();	uint8_t BMI();
	uint8_t BNE();	uint8_t BPL();	uint8_t BRK();	uint8_t BVC();
	uint8_t BVS();	uint8_t CLC();	uint8_t CLD();	uint8_t CLI();
	uint8_t CLV();	uint8_t CMP();	uint8_t CPX();	uint8_t CPY();
	uint8_t DEC();	uint8_t DEX();	uint8_t DEY();	uint8_t EOR();
	uint8_t INC();	uint8_t INX();	uint8_t INY();	uint8_t JMP();
	uint8_t JSR();	uint8_t LDA();	uint8_t LDX();	uint8_t LDY();
	uint8_t LSR();	uint8_t NOP();	uint8_t ORA();	uint8_t PHA();
	uint8_t PHP();	uint8_t PLA();	uint8_t PLP();	uint8_t ROL();
	uint8_t ROR();	uint8_t RTI();	uint8_t RTS();	uint8_t SBC();
	uint8_t SEC();	uint8_t SED();	uint8_t SEI();	uint8_t STA();
	uint8_t STX();	uint8_t STY();	uint8_t TAX();	uint8_t TAY();
	uint8_t TSX();	uint8_t TXA();	uint8_t TXS();	uint8_t TYA();

	uint8_t XXX();

	void ConnectBus(MainBus* bus) { this->bus = bus; };
	void loadBinary(const std::string& filename, uint32_t offset = 0);

private:

	struct INSTRUCTION
	{
		std::string name;
		uint8_t (*f)(void) = nullptr;
		uint8_t(*addrmode)(void) = nullptr;
		uint8_t cycles = 0;
	};

	std::vector<INSTRUCTION> instructions;

	void reset();
	void clock();
	void nmi();
	void irq();

	uint8_t fetch();

	uint8_t a;
	uint8_t x;
	uint8_t y;
	struct Statusregister p;
	uint8_t sp;
	uint16_t pc;
	uint8_t int_enable;

	uint8_t fetched = 0;
	uint16_t addr_abs = 0x0000;
	uint8_t addr_rel = 0x00;
	uint8_t opcode = 0x00;
	uint8_t cycles = 0;
	MainBus* bus;
};

#endif